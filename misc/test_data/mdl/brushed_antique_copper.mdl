/******************************************************************************
 * Copyright 2021 NVIDIA Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

mdl 1.4;

import ::df::*;
import ::base::*;
import ::math::*;
import ::state::*;
import ::anno::*;
import ::tex::*;
import ::nvidia::core_definitions::*;


export material brushed_antique_copper (
    float metal_brightness = 0.0
    [[
        anno::display_name("Metal Brightness"),
        anno::description("Increases the overall brightness of the surface"),
        anno::in_group("Appearance")
    ]],
    float metal_roughness = 0.5
    [[
        anno::display_name("Metal Roughness"),
        anno::description("Increases the overall roughness of the surface"),
        anno::in_group("Appearance")
    ]],
    uniform float bump_strength = 1.0f
    [[
        anno::display_name("Bump Strength"),
        anno::description("The strength of the bumpmap of the diamond pattern"),
        anno::in_group("Appearance")
    ]],
    uniform float2 texture_translate  =  float2 ( 0.f, 0.0f)
    [[
        anno::display_name("Translate"),
        anno::description("Controls the position of the texture"),
        anno::in_group("Transform")
    ]],
    uniform float texture_rotate =  0.f
    [[
        anno::display_name("Rotate"),
        anno::description("Rotation angle of the texture in degrees"),
        anno::in_group("Transform")
    ]],
    uniform float2 texture_scale =  float2 ( 1.f, 1.0f)
    [[
        anno::display_name("Scale"),
        anno::description("Larger numbers increase the size"),
        anno::in_group("Transform")
    ]],
    uniform int uv_space_index = 0
    [[
        anno::display_name("UV Space Index"),
        anno::description("UV Space Index"),
        anno::hard_range(0,3),
        anno::in_group("Advanced")
    ]]
)
[[
    anno::copyright_notice (
    "Copyright 2021 NVIDIA Corporation. All rights reserved."),
    anno::author("NVIDIA corporation"),
    anno::display_name("Brushed Antique Copper")
]] = let {
    color spots_color = color(0.04, 0.34, 0.25);
    float metal_spots_amount = 0.5;

    uniform texture_2d base_color_texture = texture_2d("resources/brushed_antique_copper_diff.jpg", ::tex::gamma_srgb);
    uniform texture_2d spots_map = texture_2d("resources/brushed_antique_copper_spots_map.jpg", ::tex::gamma_srgb);
    uniform texture_2d roughness_texture = texture_2d("resources/brushed_antique_copper_rough.jpg", ::tex::gamma_linear);
    uniform texture_2d normal_texture = texture_2d("resources/brushed_antique_copper_norm.jpg", ::tex::gamma_linear);

    base::texture_return spots = ::nvidia::core_definitions::file_texture(
        texture: spots_map,
        mono_source:    ::base::mono_average,
        translation: texture_translate,
        scaling: float2(1.f / texture_scale),
        rotation:       texture_rotate,
        clip:  false
    );

    color metal_color = ::nvidia::core_definitions::file_texture(
        texture: base_color_texture,
        translation: texture_translate,
        scaling: float2(1.f / texture_scale),
        rotation:       texture_rotate,
        clip:  false
    ).tint;

    base::texture_return spotsmap = ::nvidia::core_definitions::blend_colors(
        color(1.0), 
        spots_color,
        nvidia::core_definitions::color_layer_blend, 
        spots.mono);

    base::texture_return brightened_metal_color = ::nvidia::core_definitions::blend_colors(
        metal_color, 
        color(1.0), 
        nvidia::core_definitions::color_layer_add, 
        metal_brightness*0.15);

    base::texture_return final_color = ::nvidia::core_definitions::blend_colors(
        brightened_metal_color.tint, 
        spotsmap.tint, 
        nvidia::core_definitions::color_layer_multiply, 
        metal_spots_amount);

    float roughness = ::nvidia::core_definitions::file_texture(
            texture:        roughness_texture,
            mono_source:    ::base::mono_average,
            scaling:        float2(1.f / texture_scale),
            translation:    texture_translate,
            rotation:       texture_rotate,
            clip:           false,
            texture_space:  uv_space_index,
            invert:         false
    ).mono + metal_roughness * 0.25 + spots.mono * metal_spots_amount * 0.3;


    float3 metal_normal = ::nvidia::core_definitions::normalmap_texture(
            texture:  normal_texture,
            scaling:  float2(1.f / texture_scale),
            translation:  texture_translate ,
            rotation:  texture_rotate,
            clip:  false,
            factor:  bump_strength,
            texture_space:  uv_space_index
    );

    bsdf ggx_smith_bsdf = df::microfacet_ggx_smith_bsdf(
        roughness_u: roughness*roughness,
        roughness_v: roughness*roughness,
        tint: color(1.0, 1.0, 1.0),
        mode: df::scatter_reflect
    );

    bsdf final_bsdf = df::directional_factor(
        normal_tint:  final_color.tint,
        grazing_tint: color(1.0, 1.0, 1.0),
        exponent: 3.0f,
        base: ggx_smith_bsdf
    );

} in material (
    surface: material_surface(
        scattering: final_bsdf
    ),
    geometry: material_geometry(
        normal: metal_normal
    )
);




